/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package io.cloudevents.avro;

import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.SchemaStore;
import org.apache.avro.specific.SpecificData;

/**
 * Avro Event Format for CloudEvents
 */
@org.apache.avro.specific.AvroGenerated
public class AvroCloudEvent extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -3668382770350508862L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"AvroCloudEvent\",\"namespace\":\"io.cloudevents.avro\",\"doc\":\"Avro Event Format for CloudEvents\",\"fields\":[{\"name\":\"attribute\",\"type\":{\"type\":\"map\",\"values\":[\"null\",\"boolean\",\"int\",\"string\",\"bytes\"]}},{\"name\":\"data\",\"type\":[\"bytes\",\"null\",\"boolean\",{\"type\":\"map\",\"values\":[\"null\",\"boolean\",{\"type\":\"record\",\"name\":\"CloudEventData\",\"doc\":\"Representation of a JSON Value\",\"fields\":[{\"name\":\"value\",\"type\":{\"type\":\"map\",\"values\":[\"null\",\"boolean\",{\"type\":\"map\",\"values\":\"CloudEventData\"},{\"type\":\"array\",\"items\":\"CloudEventData\"},\"double\",\"string\"]}}]},\"double\",\"string\"]},{\"type\":\"array\",\"items\":\"CloudEventData\"},\"double\",\"string\"]}],\"version\":\"1.0\"}");

  public static org.apache.avro.Schema getClassSchema() {
    return SCHEMA$;
  }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<AvroCloudEvent> ENCODER =
          new BinaryMessageEncoder<AvroCloudEvent>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<AvroCloudEvent> DECODER =
          new BinaryMessageDecoder<AvroCloudEvent>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<AvroCloudEvent> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<AvroCloudEvent> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   *
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<AvroCloudEvent> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<AvroCloudEvent>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this AvroCloudEvent to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a AvroCloudEvent from a ByteBuffer.
   *
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a AvroCloudEvent instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static AvroCloudEvent fromByteBuffer(
          java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private java.util.Map<java.lang.CharSequence, java.lang.Object> attribute;
  private java.lang.Object data;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public AvroCloudEvent() {
  }

  /**
   * All-args constructor.
   *
   * @param attribute The new value for attribute
   * @param data      The new value for data
   */
  public AvroCloudEvent(java.util.Map<java.lang.CharSequence, java.lang.Object> attribute, java.lang.Object data) {
    this.attribute = attribute;
    this.data = data;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() {
    return MODEL$;
  }

  public org.apache.avro.Schema getSchema() {
    return SCHEMA$;
  }

  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
      case 0:
        return attribute;
      case 1:
        return data;
      default:
        throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
      case 0:
        attribute = (java.util.Map<java.lang.CharSequence, java.lang.Object>) value$;
        break;
      case 1:
        data = value$;
        break;
      default:
        throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'attribute' field.
   *
   * @return The value of the 'attribute' field.
   */
  public java.util.Map<java.lang.CharSequence,java.lang.Object> getAttribute() {
    return attribute;
  }


  /**
   * Sets the value of the 'attribute' field.
   * @param value the value to set.
   */
  public void setAttribute(java.util.Map<java.lang.CharSequence,java.lang.Object> value) {
    this.attribute = value;
  }

  /**
   * Gets the value of the 'data' field.
   * @return The value of the 'data' field.
   */
  public java.lang.Object getData() {
    return data;
  }


  /**
   * Sets the value of the 'data' field.
   * @param value the value to set.
   */
  public void setData(java.lang.Object value) {
    this.data = value;
  }

  /**
   * Creates a new AvroCloudEvent RecordBuilder.
   *
   * @return A new AvroCloudEvent RecordBuilder
   */
  public static io.cloudevents.avro.AvroCloudEvent.Builder newBuilder() {
    return new io.cloudevents.avro.AvroCloudEvent.Builder();
  }

  /**
   * Creates a new AvroCloudEvent RecordBuilder by copying an existing Builder.
   *
   * @param other The existing builder to copy.
   * @return A new AvroCloudEvent RecordBuilder
   */
  public static io.cloudevents.avro.AvroCloudEvent.Builder newBuilder(io.cloudevents.avro.AvroCloudEvent.Builder other) {
    if (other == null) {
      return new io.cloudevents.avro.AvroCloudEvent.Builder();
    } else {
      return new io.cloudevents.avro.AvroCloudEvent.Builder(other);
    }
  }

  /**
   * Creates a new AvroCloudEvent RecordBuilder by copying an existing AvroCloudEvent instance.
   *
   * @param other The existing instance to copy.
   * @return A new AvroCloudEvent RecordBuilder
   */
  public static io.cloudevents.avro.AvroCloudEvent.Builder newBuilder(io.cloudevents.avro.AvroCloudEvent other) {
    if (other == null) {
      return new io.cloudevents.avro.AvroCloudEvent.Builder();
    } else {
      return new io.cloudevents.avro.AvroCloudEvent.Builder(other);
    }
  }

  /**
   * RecordBuilder for AvroCloudEvent instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<AvroCloudEvent>
          implements org.apache.avro.data.RecordBuilder<AvroCloudEvent> {

    private java.util.Map<java.lang.CharSequence, java.lang.Object> attribute;
    private java.lang.Object data;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(io.cloudevents.avro.AvroCloudEvent.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.attribute)) {
        this.attribute = data().deepCopy(fields()[0].schema(), other.attribute);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.data)) {
        this.data = data().deepCopy(fields()[1].schema(), other.data);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
    }

    /**
     * Creates a Builder by copying an existing AvroCloudEvent instance
     *
     * @param other The existing instance to copy.
     */
    private Builder(io.cloudevents.avro.AvroCloudEvent other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.attribute)) {
        this.attribute = data().deepCopy(fields()[0].schema(), other.attribute);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.data)) {
        this.data = data().deepCopy(fields()[1].schema(), other.data);
        fieldSetFlags()[1] = true;
      }
    }

    /**
     * Gets the value of the 'attribute' field.
     * @return The value.
     */
    public java.util.Map<java.lang.CharSequence, java.lang.Object> getAttribute() {
      return attribute;
    }


    /**
     * Sets the value of the 'attribute' field.
     *
     * @param value The value of 'attribute'.
     * @return This builder.
     */
    public io.cloudevents.avro.AvroCloudEvent.Builder setAttribute(java.util.Map<java.lang.CharSequence, java.lang.Object> value) {
      validate(fields()[0], value);
      this.attribute = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'attribute' field has been set.
     * @return True if the 'attribute' field has been set, false otherwise.
     */
    public boolean hasAttribute() {
      return fieldSetFlags()[0];
    }


    /**
     * Clears the value of the 'attribute' field.
     * @return This builder.
     */
    public io.cloudevents.avro.AvroCloudEvent.Builder clearAttribute() {
      attribute = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
     * Gets the value of the 'data' field.
     *
     * @return The value.
     */
    public java.lang.Object getData() {
      return data;
    }


    /**
     * Sets the value of the 'data' field.
     *
     * @param value The value of 'data'.
     * @return This builder.
     */
    public io.cloudevents.avro.AvroCloudEvent.Builder setData(java.lang.Object value) {
      validate(fields()[1], value);
      this.data = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
     * Checks whether the 'data' field has been set.
     * @return True if the 'data' field has been set, false otherwise.
     */
    public boolean hasData() {
      return fieldSetFlags()[1];
    }


    /**
     * Clears the value of the 'data' field.
     * @return This builder.
     */
    public io.cloudevents.avro.AvroCloudEvent.Builder clearData() {
      data = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public AvroCloudEvent build() {
      try {
        AvroCloudEvent record = new AvroCloudEvent();
        record.attribute = fieldSetFlags()[0] ? this.attribute : (java.util.Map<java.lang.CharSequence, java.lang.Object>) defaultValue(fields()[0]);
        record.data = fieldSetFlags()[1] ? this.data : defaultValue(fields()[1]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<AvroCloudEvent>
          WRITER$ = (org.apache.avro.io.DatumWriter<AvroCloudEvent>) MODEL$.createDatumWriter(SCHEMA$);

  @Override
  public void writeExternal(java.io.ObjectOutput out)
          throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<AvroCloudEvent>
          READER$ = (org.apache.avro.io.DatumReader<AvroCloudEvent>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}










